// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  blogPosts BlogPost[]
  events    Event[]
  galleries Gallery[]

  @@map("users")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  featuredImage String?
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blog_posts")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  content     String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  featuredImage String?
  registrationRequired Boolean @default(false)
  maxParticipants Int?
  currentParticipants Int @default(0)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String?
  featuredImage String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  images   GalleryImage[]

  @@map("galleries")
}

model GalleryImage {
  id        String   @id @default(cuid())
  title     String?
  altText   String?
  url       String
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  galleryId String
  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@map("gallery_images")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contacts")
}

model Registration {
  id        String   @id @default(cuid())
  eventId   String
  name      String
  email     String
  phone     String?
  numberOfPeople Int @default(1)
  specialRequests String?
  status    RegistrationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("registrations")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLIST
}
